namespace WinFormsApp1
{
    using System.ComponentModel;

    public partial class Form1 : Form
    {
        // ViewModel for binding
        private GridSettingsViewModel _viewModel;

        public Form1()
        {
            InitializeComponent();

            // Initialize the view model
            _viewModel = new GridSettingsViewModel();
            
            // Set up data bindings
            textBoxRows.DataBindings.Add("Text", _viewModel, "Rows", true, DataSourceUpdateMode.OnPropertyChanged);
            textBoxColumns.DataBindings.Add("Text", _viewModel, "Columns", true, DataSourceUpdateMode.OnPropertyChanged);
            
            // Subscribe to property changed event to update the grid
            _viewModel.PropertyChanged += ViewModel_PropertyChanged;
        }

        private void ViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "Rows" || e.PropertyName == "Columns")
            {
                UpdateGrid();
            }
        }

        private void UpdateGrid()
        {
            try
            {
                // Clear existing columns and rows
                dataGridView1.Columns.Clear();
                dataGridView1.Rows.Clear();

                // Add columns based on view model
                for (int i = 0; i < _viewModel.Columns; i++)
                {
                    dataGridView1.Columns.Add($"col{i}", $"Column {i+1}");
                }

                // Add rows based on view model
                for (int i = 0; i < _viewModel.Rows; i++)
                {
                    dataGridView1.Rows.Add();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error updating grid: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }

    // ViewModel class that implements INotifyPropertyChanged for data binding
    public class GridSettingsViewModel : INotifyPropertyChanged
    {
        private int _rows = 0;
        private int _columns = 0;

        public int Rows
        {
            get => _rows;
            set
            {
                if (value != _rows && value >= 0)
                {
                    _rows = value;
                    OnPropertyChanged(nameof(Rows));
                }
            }
        }

        public int Columns
        {
            get => _columns;
            set
            {
                if (value != _columns && value >= 0)
                {
                    _columns = value;
                    OnPropertyChanged(nameof(Columns));
                }
            }
        }

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
